<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>F# by Example: Functions</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      window.onkeydown = (e) => {
          if (e.ctrlKey || e.altKey || e.shiftKey) {
              return;
          }
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'hello-world';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'discriminated-unions';
          }
          
      }
  </script>
  <body>
    <div class="example" id="functions">
      <h2><a href="./">F# by Example</a>: Functions</h2>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://try.fsharp.org/#?code=9NtY1TCRnRj"><img title="Run code" src="play.png" class="run" /></a><img title="Copy code" src="clipboard.png" class="copy" />
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="k">open</span> <span class="nn">System</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Functions are created with the <code>let</code> keyword. Parameters for functions are curried and are implicitly typed by the compiler.
The last expression in a function will be the returned value</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="k">let</span> <span class="nv">add</span> <span class="n">a</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>You can also explicitly set the types for your parameters</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="k">let</span> <span class="nv">multiply</span> <span class="o">(</span><span class="n">a</span><span class="o">:</span> <span class="n">int</span><span class="o">)</span> <span class="o">(</span><span class="n">b</span><span class="o">:</span> <span class="kt">float</span><span class="o">)</span> <span class="o">=</span> <span class="kt">float</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="n">printfn</span> <span class="o">$</span><span class="s">&#34;{add 1 2}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">printfn</span> <span class="o">$</span><span class="s">&#34;{multiply 2 3.2}&#34;</span></span></span></code></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="gp">$</span> dotnet fsi functions.fsx
</span></span><span class="line"><span class="cl"><span class="go">3
</span></span></span><span class="line"><span class="cl"><span class="go">6.4</span></span></span></code></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Next example: <a href="discriminated-unions">Discriminated Unions</a>.
      </p>
      

    <p class="footer">
      by <a href="https://compositional-it.com">Compositional IT</a> | <a href="https://github.com/CompositionalIT">source</a> | <a href="https://github.com/CompositionalIT">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('');codeLines.push('');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
